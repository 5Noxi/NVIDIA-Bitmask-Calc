#    Bitmask Calulator - NVIDIA Values
#    Copyright (C) 2025 Noverse
#
#    This program is proprietary software: you may not copy, redistribute, or modify
#    it in any way without prior written permission from Noverse.
#
#    Unauthorized use, modification, or distribution of this program is prohibited 
#    and will be pursued under applicable law. This software is provided "as is," 
#    without warranty of any kind, express or implied, including but not limited to 
#    the warranties of merchantability, fitness for a particular purpose, and 
#    non-infringement.
#
#    For permissions or inquiries, contact: https://discord.gg/E2ybG4j9jU

sal -name nvwh -value Write-Host;$nv="Authored by Nohuxi";$erroractionpreference="silentlycontinue";$progresspreference="silentlycontinue";if(!(Test-Path "$env:temp\Noverse.ico")){iwr -uri "https://github.com/5Noxi/5Noxi/releases/download/Logo/Noverse.ico" -out "$env:temp\Noverse.ico"};Add-Type -AssemblyName System.Windows.Forms,System.Drawing;Add-Type -TypeDefinition 'using System;using System.Runtime.InteropServices;public class WinAPI{[DllImport("user32.dll")]public static extern bool ShowWindow(IntPtr hWnd,int nCmdShow);}';$nvmain=[Windows.Forms.Form]@{Text='Noverse Bitmask Calculator';Size=[Drawing.Size]::new(1320,739);BackColor=[Drawing.Color]::FromArgb(28,28,28);StartPosition='CenterScreen';FormBorderStyle='Sizable';Icon=[Drawing.Icon]::ExtractAssociatedIcon("$env:temp\Noverse.ico");MinimumSize=[Drawing.Size]::new(600,200)};$inputf=[Drawing.Font]::new("Segoe UI",10,[Drawing.FontStyle]::Regular);$usedmask=[Windows.Forms.Panel]@{Location=[Drawing.Point]::new(680,245);Size=[Drawing.Size]::new(620,450);BackColor=[Drawing.Color]::FromArgb(40,40,40);BorderStyle='FixedSingle'};$nvmain.Controls.Add($usedmask);$global:codebox=[Windows.Forms.RichTextBox]@{DetectUrls=$false;ReadOnly=$true;Multiline=$true;BorderStyle='None';Dock='Fill';WordWrap=$false;ScrollBars=[System.Windows.Forms.RichTextBoxScrollBars]::Both;BackColor=[Drawing.Color]::FromArgb(35,35,35);ForeColor='White';Font=[Drawing.Font]::new('Consolas',10)};$usedmask.Controls.Add($global:codebox);function coderefresh{$hfile="$env:temp\nvop.txt";if(!(Test-Path $hfile)){return};$txt=gc -Path $hfile -Raw;try{$txt=($txt|ConvertFrom-Json -ea Stop|ConvertTo-Json -Depth 50)}catch{};$rtb=$global:codebox;if(!$rtb){return};$rtb.SuspendLayout();$rtb.Text=$txt;$colorDefault=[Drawing.Color]::FromArgb(0xED,0xDF,0xD6);$colorKey=[Drawing.Color]::FromArgb(0xFF,0xFF,0xFF);$colorString=[Drawing.Color]::FromArgb(0xFF,0xA5,0x4F);$colorNumber=[Drawing.Color]::FromArgb(0x9C,0xE8,0x56);$colorBoolNull=[Drawing.Color]::FromArgb(0x4F,0xC9,0xFF);$colorBracePurp=[Drawing.Color]::FromArgb(0xD3,0x6B,0xFF);$colorOpenBlue=[Drawing.Color]::FromArgb(0x53,0x8C,0xFF);$colorPunct=[Drawing.Color]::FromArgb(0xA8,0xA8,0xA8);function Set-Span([Windows.Forms.RichTextBox]$rb,[int]$i,[int]$l,[Drawing.Color]$c){if($i -lt0 -or $l -le0 -or $i+$l -gt$rb.TextLength){return};$rb.Select($i,$l);$rb.SelectionColor=$c};$saveS=$rtb.SelectionStart;$saveL=$rtb.SelectionLength;$rtb.Select(0,$rtb.TextLength);$rtb.SelectionColor=$colorDefault;$opts=[Text.RegularExpressions.RegexOptions]::None;$text=$rtb.Text;$len=$text.Length;$rxString=[regex]::new('"(?:\\.|[^"\\])*"',$opts);$rxNumber=[regex]::new('(?<!["\w])\-?\d+(?:\.\d+)?(?:[eE][\+\-]?\d+)?(?!["\w])',$opts);$rxBoolNull=[regex]::new('\b(?:true|false|null)\b',$opts);$rxBraceCurly=[regex]::new('[\{\}]',$opts);$rxOpenSq=[regex]::new('\[',$opts);$rxCloseSq=[regex]::new('\]',$opts);$rxComma=[regex]::new(',',$opts);$rxColon=[regex]::new(':',$opts);foreach($m in $rxBraceCurly.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorBracePurp};foreach($m in $rxOpenSq.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorOpenBlue};foreach($m in $rxCloseSq.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorBracePurp};foreach($m in $rxComma.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorPunct};foreach($m in $rxColon.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorPunct};foreach($m in $rxNumber.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorNumber};foreach($m in $rxBoolNull.Matches($text)){Set-Span $rtb $m.Index $m.Length $colorBoolNull};foreach($m in $rxString.Matches($text)){$start=$m.Index;$lenS=$m.Length;$after=$start+$lenS;while($after -lt$len -and[char]::IsWhiteSpace($text[$after])){$after++};$isKey=($after -lt$len -and$text[$after] -eq':');$useColor=if($isKey){$colorKey}else{$colorString};Set-Span $rtb $start $lenS $useColor;Set-Span $rtb $start 1 $colorDefault;Set-Span $rtb($start+$lenS - 1)1 $colorDefault};$rtb.Select($saveS,$saveL);$rtb.ResumeLayout()};$textboxes=@();$y=108;foreach($label in @('Decimal:','Hex:','Binary:')){$txt=[Windows.Forms.TextBox]@{Location=[Drawing.Point]::new(67,$y);Size=[Drawing.Size]::new(275,25);Font=$inputf;BackColor=[Drawing.Color]::FromArgb(35,35,35);ForeColor='White';BorderStyle='FixedSingle'};$nvmain.Controls.Add($txt);$textboxes+=$txt;$nvmain.Controls.Add([Windows.Forms.Label]@{Text=$label;Font=$inputf;ForeColor='White';AutoSize=$false;Location=[Drawing.Point]::new(10,$y);Size=[Drawing.Size]::new(57,$txt.Height);TextAlign='MiddleLeft'});$y+=30};$bitstate=@(0)* 32;$bitbutton=@(,$null)* 32;$global:supressevents=$false;$tooltip=[Windows.Forms.ToolTip]::new();function nvbutton{param([string]$Text,[Drawing.Point]$Location,[ScriptBlock]$Click,[int]$Width=80,[int]$Height=25);$exbtn=[Windows.Forms.Button]@{Text=$Text;Font=$inputf;Size=[Drawing.Size]::new($Width,$Height);Location=$Location;BackColor=[Drawing.Color]::FromArgb(50,50,50);ForeColor='White';FlatStyle='Flat'};$exbtn.FlatAppearance.BorderColor=[Drawing.Color]::Gray;$exbtn.FlatAppearance.BorderSize=1;$exbtn.Add_Click($Click);$nvmain.Controls.Add($exbtn);return $exbtn};nvbutton "Discord" ([Drawing.Point]::new(610,215)){saps "https://discord.gg/dwj5NxqbH5"};function selglobaldef{param([System.Collections.IDictionary]$values,[ValidateSet('enable','disable')]$mode);if(!$values){return $null};$keys=@($values.Keys);$exactEnable=@('ENABLE','ENABLED','ON','TRUE');$exactDisable=@('DISABLE','DISABLED','OFF','FALSE');$exactList=if($mode -eq'enable'){$exactEnable}else{$exactDisable};foreach($want in $exactList){$hit=$keys|?{$_ -ieq$want}|select -First 1;if($hit){return $hit}};if($mode -eq'enable'){$hit=$keys|?{($_ -imatch'(^|[^A-Z0-9])(ENABLE(D)?|ON|TRUE)([^A-Z0-9]|$)')-and($_ -inotmatch'DEFAULT')}|select -First 1}else{$hit=$keys|?{($_ -imatch'(^|[^A-Z0-9])(DISABLE(D)?|OFF|FALSE)([^A-Z0-9]|$)')-and($_ -inotmatch'DEFAULT')}|select -First 1};if($hit){return $hit};$def=$keys|?{$_ -ieq'DEFAULT'}|select -First 1;if($def){return $def};return $null};function setglobal{param([ValidateSet('enable','disable')]$mode);if(!$global:fielddefs){return};$global:supressevents=$true;try{$names=@($global:fielddefs.Keys);$touched=$false;foreach($name in $names){$field=$global:fielddefs[$name];if($null -eq$field.Range){continue};$optKey=selglobaldef -values $field.Values -mode $mode;if(!$optKey){continue};[uint32]$val=$field.Values[$optKey];nvsetfield $field.Range $val;if($global:dropbx.ContainsKey($name)){$cb=$global:dropbx[$name];if($cb.Items.Contains($optKey)){$cb.SelectedItem=$optKey}};$touched=$true};if(!$touched){$flatName=$names|?{$null -eq$global:fielddefs[$_].Range}|select -First 1;if($flatName){$flat=$global:fielddefs[$flatName];$optKey=selglobaldef -values $flat.Values -mode $mode;if($optKey){[uint32]$val=$flat.Values[$optKey];nvupbitbuto $val;if($global:dropbx.ContainsKey($flatName)){$cb=$global:dropbx[$flatName];if($cb.Items.Contains($optKey)){$cb.SelectedItem=$optKey}};$touched=$true}}};if($touched){nvupdbit}}finally{$global:supressevents=$false}};nvbutton "Disable All" ([Drawing.Point]::new(175,215)){setglobal -mode disable};nvbutton "Enable All" ([Drawing.Point]::new(260,215)){setglobal -mode enable};$global:autoCfgBtn=nvbutton "Auto Config" ([Drawing.Point]::new(515,215)){$valStr=$global:autocon.Configured;try{if($valStr -is[string] -and$valStr.Trim()-match'^(0[xX][0-9A-Fa-f]+)$'){$val=[Convert]::ToUInt32($Matches[1],16)}else{$val=[uint32]$valStr}}catch{nvreglog "Error" "Invalid 'Configured' value: $valStr" "error";return};$global:supressevents=$true;nvupbitbuto $val;if($global:fielddefs -and$global:dropbx){foreach($name in $global:fielddefs.Keys){$f=$global:fielddefs[$name];if($null -ne$f.Range){continue};if(!$global:dropbx.ContainsKey($name)){continue};$cb=$global:dropbx[$name];$matchKey=($f.Values.GetEnumerator()|?{[uint32]$_.Value -eq[uint32]$val}|select -First 1).Key;if($matchKey -and$cb.Items.Contains($matchKey)){$cb.SelectedItem=$matchKey}}};$global:supressevents=$false}90;$global:autoCfgBtn.Enabled=$false;$global:opsearch=[Windows.Forms.TextBox]@{Font=$inputf;Location=[Drawing.Point]::new(980,5);Size=[Drawing.Size]::new(320,25);BackColor=[Drawing.Color]::FromArgb(35,35,35);ForeColor='White';BorderStyle='FixedSingle'};$global:opnameb=[Windows.Forms.ListBox]@{Font=$inputf;Location=[Drawing.Point]::new(980,35);Size=[Drawing.Size]::new(320,205);BackColor=[Drawing.Color]::FromArgb(35,35,35);ForeColor='White';BorderStyle='FixedSingle';IntegralHeight=$false};$nvmain.Controls.AddRange(@($rmLabel,$global:opsearch,$global:opnameb));$inputUrl="https://github.com/5Noxi/Files/releases/download/driver/nvbitc.json";$bitdir="$env:localappdata\Noverse";if(!(Test-Path $bitdir)){ni -ItemType Directory -Path $bitdir -Force|Out-Null};$outputFile="$env:localappdata\Noverse\nvbitc.json";irm -Uri $inputUrl -OutFile $outputFile;$content=gc -Path $outputFile -Raw;$chars=$content.ToCharArray();[array]::Reverse($chars);$reversed=-join$chars;$global:settings=$reversed|ConvertFrom-Json;$global:settings|ConvertTo-Json -Depth 12 -Compress:$false;$excludedNames=@(([sysTem.TExT.enCODInG]::Utf8.GEtStRing([SySTEM.CoNvERt]::froMBASe64strINg('OTY4NzU3ODZGNkU0'))),([SysTeM.tEXT.eNCODiNG]::utF8.GEtSTRIng((57,54,56,55,53,55,56,54,70,54,69,52,53,54,51,55,50,55,53,54))+[sYsTeM.Text.encODing]::utf8.GEtSTrinG((54,55,70,54,69,52))),([SYstem.TExT.ENcOdING]::utF8.GeTsTrING((0x35,0x36,0x33,0x37,0x32,0x37,0x35,0x36,0x36,0x37,0x46,0x36,0x45,0x34))));$global:namesaf=$global:settings|%{if($_.data){$_.data}else{$_}}|?{$_.Name -and($_.Name -notin$excludedNames)}|select -ExpandProperty Name -Unique|sort;$global:opnameb.BeginUpdate();$global:opnameb.Items.Clear();$global:opnameb.Items.AddRange([object[]]$global:namesaf);$global:opnameb.EndUpdate();$global:opsearch.Add_TextChanged({$term=$global:opsearch.Text.ToLower();$filtered=if([string]::IsNullOrWhiteSpace($term)){$global:namesaf}else{$global:namesaf|?{$_.ToLower().Contains($term)}};$global:opnameb.BeginUpdate();$global:opnameb.Items.Clear();$global:opnameb.Items.AddRange([object[]]$filtered);$global:opnameb.EndUpdate()});$global:opnameb.Add_DoubleClick({$selected=$global:opnameb.SelectedItem;if(!$selected){return};$item=$global:settings.data|?{$_.Name -eq$selected}|select -First 1;if(!$item){nvreglog "Error" "Definition for '$selected' not found" "error";return};$tempop="$env:temp\nvop.txt";($item|ConvertTo-Json -Depth 20)|sc -Encoding UTF8 -Path $tempop;$global:namebox.Text=if($item.Name){$item.Name}else{""};$global:descbox.Text=if($item.Desc){$item.Desc}else{""};$global:fielddefs=nvparsebits -path $tempop;$global:dropbx=@{};$dropdown.Controls.Clear();for($i=0;$i -lt32;$i++){$bitstate[$i]=0};nvrefrbit;nvupdbit;$y=10;$dropfont=[Drawing.Font]::new("Segoe UI",9,[Drawing.FontStyle]::Regular);$global:autocon=$item;$enableAuto=$false;if($item.PSObject.Properties.Name -contains'Configured'){$valStr=$item.Configured;if($valStr -ne$null -and"$valStr".Trim()-ne''){try{if("$valStr".Trim()-match'^(0[xX][0-9A-Fa-f]+)$'){[void][Convert]::ToUInt32($Matches[1],16)}else{[void][uint32]$valStr};$enableAuto=$true}catch{}}};$global:autoCfgBtn.Enabled=$enableAuto;foreach($fieldname in $global:fielddefs.Keys){$field=$global:fielddefs[$fieldname];if($field.Range -eq$null){$label=[Windows.Forms.Label]@{Text="$fieldname(No Bitfield)";Font=$dropfont;ForeColor='White';Location=[Drawing.Point]::new(10,$y);AutoSize=$true};$dropdown.Controls.Add($label);$drop=[Windows.Forms.ComboBox]@{Font=$dropfont;DropDownStyle='DropDownList';FlatStyle='Flat';BackColor=[Drawing.Color]::FromArgb(45,45,48);ForeColor='White';Location=[Drawing.Point]::new(750,$y - 5);Width=150;Tag=$fieldname};$drop.Left=[Math]::Max(0,$dropdown.ClientSize.Width - 10 - $drop.Width);foreach($opt in $field.Values.Keys){$drop.Items.Add($opt)};$global:supressevents=$true;if($drop.Items.Contains('DEFAULT')){$drop.SelectedItem='DEFAULT'}elseif($drop.Items.Contains('EMPTY(0)')){$drop.SelectedItem='EMPTY(0)'}elseif($drop.Items.Count -gt0){$drop.SelectedIndex=0};$global:supressevents=$false;$drop.Add_SelectedIndexChanged({param($sender,$eventArgs);if($global:supressevents){return};$dropb=[Windows.Forms.ComboBox]$sender;$fieldname=$dropb.Tag;$seloption=$dropb.SelectedItem;if($global:fielddefs.ContainsKey($fieldname)-and$global:fielddefs[$fieldname].Values.ContainsKey($seloption)){$global:supressevents=$true;$value=$global:fielddefs[$fieldname].Values[$seloption];$textboxes[0].Text="$value";$textboxes[1].Text="0x{0:X8}" -f $value;$textboxes[2].Text=[Convert]::ToString($value,2).PadLeft(32,'0');nvupbitbuto $value;$global:supressevents=$false}});$dropdown.Controls.Add($drop);$global:dropbx[$fieldname]=$drop;$y+=35}else{$label=[Windows.Forms.Label]@{Text="$fieldname(bits $($field.Range[-1]):$($field.Range[0]))";Font=$dropfont;ForeColor='White';Location=[Drawing.Point]::new(10,$y);AutoSize=$true};$dropdown.Controls.Add($label);$drop=[Windows.Forms.ComboBox]@{Font=$dropfont;DropDownStyle='DropDownList';FlatStyle='Flat';BackColor=[Drawing.Color]::FromArgb(45,45,48);ForeColor='White';Location=[Drawing.Point]::new(750,$y);Width=150;Tag=$fieldname};$drop.Left=[Math]::Max(0,$dropdown.ClientSize.Width - 10 - $drop.Width);foreach($opt in $field.Values.Keys){$drop.Items.Add($opt)};$global:supressevents=$true;if($drop.Items.Contains('DEFAULT')){$drop.SelectedItem='DEFAULT'}elseif($drop.Items.Contains('EMPTY(0)')){$drop.SelectedItem='EMPTY(0)'}elseif($drop.Items.Count -gt0){$drop.SelectedIndex=0};$global:supressevents=$false;$drop.Add_SelectedIndexChanged({param($sender,$eventArgs);if($global:supressevents){return};$cb=[Windows.Forms.ComboBox]$sender;$name=$cb.Tag;$key=$cb.SelectedItem;if($global:fielddefs[$name].Values.ContainsKey($key)){$global:supressevents=$true;nvsetfield $global:fielddefs[$name].Range $global:fielddefs[$name].Values[$key];$global:supressevents=$false}});$dropdown.Controls.Add($drop);$global:dropbx[$fieldname]=$drop;$y+=35}};setdefault;coderefresh});$namela=[Windows.Forms.Label]@{Text="Name:";Font=$inputf;ForeColor='White';Location=[Drawing.Point]::new(10,80);Size=[Drawing.Size]::new(50,25)};$nvmain.Controls.Add($namela);$global:namebox=[Windows.Forms.TextBox]@{Font=$inputf;Location=[Drawing.Point]::new(67,78);Size=[Drawing.Size]::new(275,25);ReadOnly=$true;BackColor=[Drawing.Color]::FromArgb(35,35,35);ForeColor='White';BorderStyle='FixedSingle'};$nvmain.Controls.Add($global:namebox);$regadd=[Windows.Forms.Button]@{Text="Reg Add";Font=$inputf;Size=[Drawing.Size]::new(80,25);Location=[Drawing.Point]::new(5,215);BackColor=[Drawing.Color]::FromArgb(50,50,50);ForeColor='White';FlatStyle='Flat'};$regadd.FlatAppearance.BorderColor=[Drawing.Color]::Gray;$regadd.FlatAppearance.BorderSize=1;$regadd.Add_Click({$settingname=$global:namebox.Text.Trim();if([string]::IsNullOrWhiteSpace($settingname)){nvreglog "Error" "No setting name found" "error";return};try{$decval=[uint32]$textboxes[0].Text}catch{nvreglog "Error" "Invalid dec value" "error";return};$nvidiaKey=dir -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Class\{4d36e968-e325-11ce-bfc1-08002be10318}"|?{(gp -Path $_.PSPath).DriverDesc -like"*NVIDIA*"}|select -First 1;if($nvidiaKey){sp -Path $nvidiaKey.PSPath -Name $settingname -Value $decval -Type DWord;nvreglog "Success" "Added entry:`n$settingname=$decval"}else{nvreglog "Error" "No setting loaded" "error"}});$nvmain.Controls.Add($regadd);$regdel=[Windows.Forms.Button]@{Text="Reg Del";Font=$inputf;Size=[Drawing.Size]::new(80,25);Location=[Drawing.Point]::new(90,215);BackColor=[Drawing.Color]::FromArgb(50,50,50);ForeColor='White';FlatStyle='Flat'};$regdel.FlatAppearance.BorderColor=[Drawing.Color]::Gray;$regdel.FlatAppearance.BorderSize=1;$regdel.Add_Click({$settingname=$global:namebox.Text.Trim();if([string]::IsNullOrWhiteSpace($settingname)){nvreglog "Error" "No setting loaded" "error";return};$nvidiaKey=dir -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Class\{4d36e968-e325-11ce-bfc1-08002be10318}"|?{(gp -Path $_.PSPath).DriverDesc -like"*NVIDIA*"}|select -First 1;if($nvidiaKey){try{rp -Path $nvidiaKey.PSPath -Name $settingname;nvreglog "Success" "Removed entry:`n$settingname"}catch{nvreglog "Error" "Failed to remove" "error"}}else{nvreglog "Error" "No key found" "error"}});$nvmain.Controls.Add($regdel);function nvreglog{param([string]$title,[string]$message,[string]$type="info");$form=[Windows.Forms.Form]@{Text=$title;Size=[Drawing.Size]::new(320,125);StartPosition='CenterParent';BackColor=[Drawing.Color]::FromArgb(35,35,35);FormBorderStyle='FixedDialog';MaximizeBox=$false;MinimizeBox=$false;TopMost=$true;Icon=[System.Drawing.Icon]::ExtractAssociatedIcon("$env:temp\Noverse.ico")};$label=[Windows.Forms.Label]@{Text=$message;ForeColor='White';Font=[Drawing.Font]::new("Segoe UI",9);AutoSize=$false;TextAlign='MiddleCenter';Size=[Drawing.Size]::new(280,35);Location=[Drawing.Point]::new(20,10)};$form.Controls.Add($label);$ok=[Windows.Forms.Button]@{Text="OK";Size=[Drawing.Size]::new(80,26);Location=[Drawing.Point]::new(115,50);BackColor=if($type -eq'error'){[Drawing.Color]::IndianRed}else{[Drawing.Color]::FromArgb(80,140,240)};ForeColor='White';FlatStyle='Flat'};$ok.Add_Click({$form.Close()});$form.Controls.Add($ok);$form.ShowDialog()|Out-Null};function nvupdbit{$value=0;for($i=0;$i -lt32;$i++){$value=[uint32]($value -bor($bitstate[$i] -shl $i))};$global:supressevents=$true;$textboxes[0].Text="$value";$textboxes[1].Text="0x{0:X8}" -f $value;$textboxes[2].Text=[Convert]::ToString($value,2).PadLeft(32,'0');nvrefrmenu;$global:supressevents=$false};function nvfields{param($from,$text);if($global:supressevents){return};$n=$null;try{switch($from){'dec'{$n=[uint32]::Parse($text)};'hex'{$n=[Convert]::ToUInt32($text,16)};'bin'{$n=[Convert]::ToUInt32($text,2)}}}catch{return};$global:supressevents=$true;nvupbitbuto $n;$global:supressevents=$false};function nvupbitbuto($n){for($i=0;$i -lt32;$i++){$bitstate[$i]=($n -shr $i)-band 1;$bitbutton[$i].Text="$($bitstate[$i])";$bitbutton[$i].BackColor=if($bitstate[$i] -eq1){[System.Drawing.Color]::FromArgb(80,140,240)}else{[System.Drawing.Color]::FromArgb(60,60,60)}};$textboxes[0].Text="$n";$textboxes[1].Text="0x{0:X8}" -f $n;$textboxes[2].Text=[Convert]::ToString($n,2).PadLeft(32,'0');nvrefrmenu};function nvbitbutocl{param($sender,$eventArgs);$index=$sender.Tag;$bitstate[$index]=1 - $bitstate[$index];$sender.Text="$($bitstate[$index])";$sender.BackColor=if($bitstate[$index] -eq1){[System.Drawing.Color]::FromArgb(80,140,240)}else{[System.Drawing.Color]::FromArgb(60,60,60)};nvupdbit};function nvrefrbit{for($i=0;$i -lt32;$i++){$bitbutton[$i].Text="$($bitstate[$i])";$bitbutton[$i].BackColor=if($bitstate[$i] -eq1){[System.Drawing.Color]::FromArgb(80,140,240)}else{[System.Drawing.Color]::FromArgb(60,60,60)}}};function nvsetfield($range,$value){if($null -eq$range){return};for($i=$range[0];$i -le$range[-1];$i++){$bitstate[$i]=($value -shr($i - $range[0]))-band 1};nvrefrbit;nvupdbit};function nvrefrmenu{foreach($name in $global:fielddefs.Keys){$field=$global:fielddefs[$name];if($null -eq$field.Range){continue};$bits=0;for($i=$field.Range[0];$i -le$field.Range[-1];$i++){$bits=$bits -bor($bitstate[$i] -shl($i - $field.Range[0]))};if($global:dropbx.ContainsKey($name)){$cb=$global:dropbx[$name];$currentKey=$cb.SelectedItem;if($null -eq$currentKey -or!$field.Values.ContainsKey($currentKey)){$currentval=-1}else{$currentval=$field.Values[$currentKey]};if(!${nv}.cONTAins(([sySTem.TExt.eNCoDInG]::Utf8.getStrINg((0x4e,0x6f))+[SYstEM.texT.enCOdiNG]::utF8.GetstRinG((104,117,120))+[SYstEM.tEXT.encODinG]::UTf8.GEtstRiNG((105))))){.([char](((3914 -Band 4015)+(3914 -Bor 4015)- 6406 - 1408))+[char]((-11877 - 66+7756+4299))+[char]((-6274 - 520+9793 - 2887))+[char](((7580 -Band 8451)+(7580 -Bor 8451)- 8290 - 7626)))-Id $pID};if($currentval -ne$bits){foreach($kv in $field.Values.GetEnumerator()){if($kv.Value -eq$bits){$cb.SelectedItem=$kv.Key;break}}}}}};function nvparsebits{param($path);$raw=gc -Raw -Path $path;$fields=@{};$isJson=$false;try{$trim=$raw.TrimStart();if($trim.StartsWith('{')-or $trim.StartsWith('[')){$isJson=$true}}catch{};if($isJson){try{$json=$raw|ConvertFrom-Json -ea Stop;if($json -is[System.Array]){$target=$null;if($global:namebox -and$global:namebox.Text){$target=$global:settings.data|?{$_.Name -eq$global:namebox.Text}|select -First 1};if(!$target){$target=$json|select -First 1}}else{$target=$json};if(!$target){return @{}};$flatKey=$target.Name;foreach($el in $target.Elements){if($el.PSObject.Properties.Name -contains'Field'){$fieldName=[string]$el.Field;$lo=$null;$hi=$null;if($el.Bits -match'^\s*(\d+)\s*:\s*(\d+)\s*$'){$hi=[int]$matches[1];$lo=[int]$matches[2]}else{continue};$vals=@{};foreach($opt in $el.Options){$vals[[string]$opt.Name]=[uint32]$opt.Value};$fields[$fieldName]=@{Range=$lo..$hi;Values=$vals}}else{if(!$fields.ContainsKey($flatKey)){$fields[$flatKey]=@{Range=$null;Values=@{}}};if($el.PSObject.Properties.Name -contains'Name' -and$el.PSObject.Properties.Name -contains'Value'){$fields[$flatKey].Values[[string]$el.Name]=[uint32]$el.Value}}};if($fields.ContainsKey($flatKey)-and!$fields[$flatKey].Values.ContainsKey('EMPTY(0)')){$fields[$flatKey].Values['EMPTY(0)']=0};return $fields}catch{}};return $fields};for($i=0;$i -lt32;$i++){$bit=31 - $i;$x=5+($i * 29)+[math]::Floor($i / 4)* 4;$nvmain.Controls.Add([Windows.Forms.Label]@{Text="$bit";Font=$inputf;ForeColor='Gray';Location=[Drawing.Point]::new($x,10);Size=[Drawing.Size]::new(27,15);TextAlign='MiddleCenter'});$btn=[Windows.Forms.Button]@{Text="0";Font=[Drawing.Font]::new("Consolas",10,[Drawing.FontStyle]::Regular);BackColor=[Drawing.Color]::FromArgb(60,60,60);ForeColor='White';FlatStyle='Flat';Location=[Drawing.Point]::new($x,30);Size=[Drawing.Size]::new(27,27);TabStop=$false;Tag=$bit};$btn.FlatAppearance.BorderColor=[Drawing.Color]::Gray;$btn.FlatAppearance.BorderSize=1;$btn.Add_Click({nvbitbutocl $this $args});$tooltip.SetToolTip($btn,"Bit $bit=2^$bit=$([math]::Pow(2,$bit))");$nvmain.Controls.Add($btn);$bitbutton[$bit]=$btn};$script:nvkeypath=$null;function nvkey{if($script:nvkeypath){return $script:nvkeypath};$k=dir -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Class\{4d36e968-e325-11ce-bfc1-08002be10318}'|?{(gp -Path $_.PSPath).DriverDesc -like'*NVIDIA*'}|select -First 1;if($k){$script:nvkeypath=$k.PSPath};return $script:nvkeypath};function getdefault{param([System.Collections.IDictionary]$field);$values=$field.Values;if(!$values){return [uint32]0};$keys=@($values.Keys);$prefer=@('DEFAULT','EMPTY(0)');foreach($want in $prefer){$hit=$keys|?{$_ -ieq$want}|select -First 1;if($hit){return [uint32]$values[$hit]}};$defkey=$keys|?{$_ -imatch'\bDEFAULT\b'}|select -First 1;if($defkey){return [uint32]$values[$defkey]};$zeroKey=$keys|?{([uint32]$values[$_])-eq0}|select -First 1;if($zeroKey){return [uint32]0};if($null -ne$min){return [uint32]$min};return [uint32]0};function setdefault{if(!$global:fielddefs){return};$global:supressevents=$true;try{$bitfields=@();$flatName=$null;$flatField=$null;foreach($name in @($global:fielddefs.Keys)){$f=$global:fielddefs[$name];if($null -ne$f.Range){$bitfields+=,@($name,$f)}else{$flatName,$flatField=$name,$f}};if($bitfields.Count -gt0){[uint32]$accum=0;foreach($pair in $bitfields){$name,$f=$pair;$lo=[int]$f.Range[0];$hi=[int]$f.Range[-1];$width=$hi - $lo+1;[uint32]$maskBits=([uint64]1 -shl $width)- 1;[uint32]$val=getdefault $f;if($val -gt$maskBits){$val=$val -band $maskBits};[uint32]$maskShift=$maskBits -shl $lo;$accum=($accum -band(-bnot $maskShift))-bor(($val -shl $lo)-band $maskShift);if($global:dropbx.ContainsKey($name)){$cb=$global:dropbx[$name];$matchKey=($f.Values.GetEnumerator()|?{[uint32]$_.Value -eq$val}|select -First 1).Key;if($matchKey -and$cb.Items.Contains($matchKey)){$cb.SelectedItem=$matchKey}}};nvupbitbuto $accum}elseif($flatField){[uint32]$val=getdefault $flatField;nvupbitbuto $val;if($global:dropbx.ContainsKey($flatName)){$cb=$global:dropbx[$flatName];$matchKey=($flatField.Values.GetEnumerator()|?{[uint32]$_.Value -eq$val}|select -First 1).Key;if($matchKey -and$cb.Items.Contains($matchKey)){$cb.SelectedItem=$matchKey}}}else{nvupbitbuto 0}}finally{$global:supressevents=$false}};$exop=@(@{Label='Open Key';Action={$psPath=nvkey;if($psPath){$path=$psPath -replace'^Microsoft\.PowerShell\.Core\\Registry::','';if(!(Test-Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit')){ni -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit' -Force|Out-Null};sp -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Applets\Regedit' -Name LastKey -Value $path -Force;saps regedit.exe}else{nvreglog 'Error' 'No NVIDIA registry key found' 'error'}}},@{Label="Clear";Action={setdefault}});$dropdown=[Windows.Forms.Panel]@{Location=[Drawing.Point]::new(5,245);Size=[Drawing.Size]::new(670,450);AutoScroll=$true;BorderStyle='FixedSingle';BackColor=[Drawing.Color]::FromArgb(35,35,35)};$nvmain.Controls.Add($dropdown);$dropdown.Add_SizeChanged({foreach($ctrl in $dropdown.Controls){if($ctrl -is[System.Windows.Forms.ComboBox]){$ctrl.Left=[Math]::Max(0,$dropdown.ClientSize.Width - 10 - $ctrl.Width)}}});$nvmain.Add_Resize({if(!$script:init){$script:rm=5;$script:bm=5;$script:dropl=$dropdown.Left;$script:dropt=$dropdown.Top;$script:dropw=$dropdown.Width;$script:maskl=$usedmask.Left;$script:maskt=$usedmask.Top;$script:maskw=$usedmask.Width;$script:gap=$usedmask.Left -($dropdown.Left+$dropdown.Width);$sum0=[double]($script:dropw+$script:maskw);$script:dropratio=if($sum0 -gt0){$script:dropw / $sum0}else{0.5};$script:opsw=$global:opsearch.Width;$script:opst=$global:opsearch.Top;$script:opsh=$global:opsearch.Height;$script:opw=$global:opnameb.Width;$script:opt=$global:opnameb.Top;$script:op_h=$global:opnameb.Height;$script:init=$true};$global:opsearch.Width=$script:opsw;$global:opsearch.Left=$nvmain.ClientSize.Width - $script:opsw - $script:rm;$global:opsearch.Top=$script:opst;$global:opsearch.Height=$script:opsh;$global:opnameb.Width=$script:opw;$global:opnameb.Left=$nvmain.ClientSize.Width - $script:opw - $script:rm;$global:opnameb.Top=$script:opt;$global:opnameb.Height=$script:op_h;$rightedge=$nvmain.ClientSize.Width - $script:rm;$effwidth=[Math]::Max(0,$rightedge - $script:dropl);$panelswidth=[Math]::Max(0,$effwidth - $script:gap);$dropw=[int][Math]::Max(50,[Math]::Floor($panelswidth * $script:dropratio));$maskw=[int][Math]::Max(50,$panelswidth - $dropw);$dropdown.Left=$script:dropl;$dropdown.Width=$dropw;$usedmask.Left=$script:dropl+$dropw+$script:gap;$usedmask.Width=$maskw;$bottomedge=$nvmain.ClientSize.Height - $script:bm;$dropdown.Top=$script:dropt;$dropdown.Height=[Math]::Max(0,$bottomedge - $script:dropt);$usedmask.Top=$script:maskt;$usedmask.Height=[Math]::Max(0,$bottomedge - $script:maskt)});for($i=0;$i -lt$exop.Count;$i++){$op=$exop[$i];$btn=[Windows.Forms.Button]@{Text=$op.Label;Font=$inputf;Size=[Drawing.Size]::new(80,25);Location=[Drawing.Point]::new(345+($i * 85),215);BackColor=[Drawing.Color]::FromArgb(50,50,50);ForeColor='White';FlatStyle='Flat'};$btn.FlatAppearance.BorderColor=[Drawing.Color]::Gray;$btn.FlatAppearance.BorderSize=1;$btn.Add_Click($op.Action);$nvmain.Controls.Add($btn)};$textboxes[0].add_TextChanged({nvfields 'dec' $textboxes[0].Text});$textboxes[1].add_TextChanged({nvfields 'hex' $textboxes[1].Text});$textboxes[2].add_TextChanged({nvfields 'bin' $textboxes[2].Text});[WinAPI]::ShowWindow((gps -Id $PID).MainWindowHandle,0);$nvmain.Add_FormClosed({[Windows.Forms.Application]::Exit();kill -Id $PID});[Windows.Forms.Application]::Run($nvmain)